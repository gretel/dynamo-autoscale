#!/usr/bin/env ruby

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

DEFAULT_LOG_LEVEL = :info
DEFAULT_LOG_LEVEL_AWS = :warn

require 'rubygems'
require 'commander'

require_relative '../lib/dynamo-autoscale/version'
require_relative '../lib/dynamo-autoscale/cli'

class Command
  include Commander::Methods

  def run
    program :name, 'dynamo-autoscale'
    program :version, DynamoAutoscale::VERSION
    program :description, 'CLI to manage dynamo-autoscale in a nice way.'

    default_command :help

    global_option('--log_level LEVEL', String, "Set logging level (debug, info, warn, error, fatal). Default is '#{DEFAULT_LOG_LEVEL}'.") { |val| $logger_level = val }
    global_option('--log_level_aws LEVEL', "Set logging level for the AWS-SDK (debug, info, warn, error, fatal). Default is '#{DEFAULT_LOG_LEVEL_AWS}'.") { |val| $logger_level_aws = val }
    global_option('--debug', 'Shortcut for: --log_level debug --log_level_aws debug') { $logger_level = $logger_level_aws = :debug }

    command :start do |c|
      c.syntax = "dynamo-autoscale #{c.name}"
      c.description = 'Start the program and enter the polling loop.'
      c.option '-c', '--config PATH', String, 'Configuration file.'
      c.option '--dry_run', 'Do not actually touch the API endpoint.'
      c.action do |args, options|
        unless options.config
          say 'option ''--config PATH'' is required.'
          exit 1
        end
        # be explicit in regards to running dry
        if options.dry_run
          $dry_run = true
        else
          $dry_run = false
        end
        DynamoAutoscale::CLI.run(c.name, options)
      end
    end

    command 'check_ruleset' do |c|
      c.syntax = "dynamo-autoscale #{c.name}"
      c.description = 'Validate the scaling ruleset defined.'
      c.option '--config PATH', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option ''--config PATH'' is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(c.name, options)
      end
    end

    command 'check_email' do |c|
      c.syntax = "dynamo-autoscale #{c.name}"
      c.description = 'Try to send notification email.'
      c.option '--config PATH', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option ''--config PATH'' is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(c.name, options)
      end
    end

    command 'test_random' do |c|
      c.syntax = "dynamo-autoscale #{c.name}"
      c.description = 'Run a dry and random test.'
      # c.option '--graph', 'Output a graph.'
      c.option '--config PATH', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option ''--config PATH'' is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(c.name, options)
      end
    end

    command 'test_simulate' do |c|
      c.syntax = "dynamo-autoscale #{c.name}"
      c.description = 'Run a simulation test.'
      c.option '--config PATH', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option ''--config PATH'' is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(c.name, options)
      end
    end

    command 'pull_cw_data' do |c|
      c.syntax = "dynamo-autoscale #{c.name}"
      c.description = 'Get historic data from the CloudWatch API.'
      c.option '--config PATH', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option ''--config PATH'' is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(c.name, options)
      end
    end

    command 'lament_wastage' do |c|
      c.syntax = "dynamo-autoscale #{c.name}"
      c.description = 'Calculate what a waste of money this is.'
      c.option '--config PATH', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option ''--config PATH'' is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(c.name, options)
      end
    end

    begin
      run!
    rescue => e
      STDERR.puts "Exception: #{e.inspect}"
    end
  end
end

Command.new.run # if $0 == __FILE__

exit 0
