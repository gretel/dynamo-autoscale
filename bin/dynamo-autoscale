#!/usr/bin/env ruby

require 'rubygems'
require 'commander'


  require_relative '../lib/dynamo-autoscale/version'
  require_relative '../lib/dynamo-autoscale/cli'

class Command
  include Commander::Methods

  def run
    program :name, $0
    program :version, DynamoAutoscale::VERSION
    program :description, 'Command wrapper to manage dynamo-autoscale nicely.'
    default_command :help
    global_option('--debug') { $_DEBUG_LOG = true }

    command :check_ruleset do |c|
      c.syntax = "dynamo-autoscale-cmd #{c.name} --file [ruleset]"
      c.description = 'Validate a scaling ruleset.'
      c.option '--file STRING', String, 'Filename of the rulset to validate'
      c.action do |args, options|
        unless options.file
          say 'option --file is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(:check_ruleset, options)
      end
    end

    command :get_wastage do |c|
      c.syntax = "dynamo-autoscale-cmd #{c.name}"
      c.description = 'Calculate what a waste of money this is.'
      c.option '--config FILE', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option --config FILE is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(:get_wastage, options)
      end
    end

    command :test_email do |c|
      c.syntax = "dynamo-autoscale-cmd #{c.name}"
      c.description = 'Try to send notification email.'
      c.option '--config FILE', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option --config FILE is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(:test_email, options)
      end
    end

    command :start do |c|
      c.syntax = "dynamo-autoscale-cmd #{c.name}"
      c.description = 'Monitor process running.'
      c.option '--config FILE', String, 'Configuration file.'
      c.option '--monitor', nil, 'Enable interactive monitoring.'
      c.action do |args, options|
        unless options.config
          say 'option --config FILE is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(:start, options)
      end
    end

    command :test_random do |c|
      c.syntax = "dynamo-autoscale-cmd #{c.name}"
      c.description = 'Run a dry and random test.'
      c.option '--graph', nil, 'Output a graph.'
      c.option '--config FILE', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option --config FILE is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(:test_random, options)
      end
    end

    command :test_simulate do |c|
      c.syntax = "dynamo-autoscale-cmd #{c.name}"
      c.description = 'Run a simulation test.'
      c.option '--config FILE', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option --config FILE is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(:test_simulate, options)
      end
    end

    command :pull_data do |c|
      c.syntax = "dynamo-autoscale-cmd #{c.name}"
      c.description = 'Get historic data from the CloudWatch API.'
      c.option '--config FILE', String, 'Configuration file.'
      c.action do |args, options|
        unless options.config
          say 'option --config FILE is required.'
          exit 1
        end
        DynamoAutoscale::CLI.run(:pull_data, options)
      end
    end

    begin
      run!
    rescue => e
      if $_DEBUG_LOG
        STDERR.puts sprintf("%s\n%s", e, e.backtrace.join("\n"))
      else
        STDERR.puts "Failed to initalize, exception #{e.class}: '#{e.message}'"
      end
      exit -2
    end
  end
end

Command.new.run if $0 == __FILE__
